{"version":3,"sources":["components/SerbiaComponent.js","components/CroatiaComponent.js","components/BosniaComponent.js","components/MontenegroComponent.js","components/SloveniaComponent.js","components/MacedoniaComponent.js","App.js","serviceWorker.js","index.js"],"names":["SerbiaComponent","props","_isMounted","state","statusSerbia","loading","getStatusSerbia","bind","this","$","data","setState","TableRow","className","TableCell","colSpan","console","log","serbia","align","confirmed","active","recovered","deaths","Component","getStatusCroatia","statusCroatia","croatia","BosniaComponent","statusBosnia","getStatusBosnia","bosnia","MontenegroComponent","statusMontenegro","getStatusMontenegro","montenegro","SloveniaComponent","statusSlovenia","getStatusSlovenia","slovenia","MacedoniaComponent","statusMacedonia","getStatusMacedonia","macedonia","App","handleShow","isActive","Button","variant","onClick","TableContainer","component","Paper","id","Table","aria-label","TableHead","TableBody","CroatiaComponent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.813bc361.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport * as $ from 'jquery';\r\n\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\n\r\n\r\nclass SerbiaComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        statusSerbia: [],\r\n        loading: true\r\n    }\r\n    this.getStatusSerbia = this.getStatusSerbia.bind(this);\r\n}\r\n\r\n_isMounted = false;\r\n\r\ncomponentDidMount() {\r\n  this._isMounted = true;\r\n  this.getStatusSerbia();\r\n}\r\n\r\ngetStatusSerbia() {\r\n  var url = `https://covid2019-api.herokuapp.com/v2/country/serbia`;\r\n  $.get(url, (data) => {\r\n      //console.log(data);\r\n      if (this._isMounted){\r\n        this.setState({\r\n          statusSerbia: data,\r\n          loading: false\r\n        });\r\n      }\r\n  });\r\n}\r\n\r\ncomponentWillUnmount() {\r\n  this._isMounted = false;\r\n}\r\n\r\n  render(){\r\n    if (this.state.loading === true) {\r\n    return (\r\n        <TableRow className=\"wrapper\">\r\n            <TableCell className=\"loading\" colSpan=\"7\">Uƒçitavam podatke...</TableCell>\r\n        </TableRow>\r\n    )\r\n} else {\r\n    console.log(this.state)\r\n    let serbia = this.state.statusSerbia;\r\n    \r\n    return (\r\n    \r\n        <TableRow>\r\n            <TableCell align=\"right\">1</TableCell>\r\n            <TableCell align=\"right\">Srbija</TableCell>\r\n            <TableCell align=\"right\">9,024,734 ( 7,186,862 )</TableCell>\r\n            <TableCell align=\"right\">{serbia.data.confirmed}</TableCell>\r\n            <TableCell align=\"right\">{serbia.data.active}</TableCell>\r\n            <TableCell align=\"right\">{serbia.data.recovered}</TableCell>\r\n            <TableCell align=\"right\">{serbia.data.deaths}</TableCell>\r\n        </TableRow>\r\n               \r\n  );\r\n  }\r\n}\r\n}\r\n\r\nexport default SerbiaComponent;","import React, { Component } from 'react'\r\nimport * as $ from 'jquery';\r\n\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\n\r\n\r\nclass SerbiaComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        statusSerbia: [],\r\n        loading: true\r\n    }\r\n    this.getStatusCroatia = this.getStatusCroatia.bind(this);\r\n}\r\n\r\n\r\n_isMounted = false;\r\n\r\ncomponentDidMount() {\r\n  this._isMounted = true;\r\n  this.getStatusCroatia();\r\n}\r\n\r\ngetStatusCroatia() {\r\n  var url = `https://covid2019-api.herokuapp.com/v2/country/croatia`;\r\n  $.get(url, (data) => {\r\n      //console.log(data);\r\n      if (this._isMounted){\r\n        this.setState({\r\n          statusCroatia: data,\r\n          loading: false\r\n        });\r\n      }\r\n  });\r\n}\r\n\r\n\r\ncomponentWillUnmount() {\r\n  this._isMounted = false;\r\n}\r\n\r\n  render(){\r\n    if (this.state.loading === true) {\r\n    return (\r\n        <TableRow className=\"wrapper\">\r\n            <TableCell className=\"loading\" colSpan=\"7\">Uƒçitavam podatke...</TableCell>\r\n        </TableRow>\r\n    )\r\n} else {\r\n    console.log(this.state)\r\n    let croatia = this.state.statusCroatia;\r\n    \r\n    return (\r\n    \r\n        <TableRow>\r\n            <TableCell align=\"right\">2</TableCell>\r\n            <TableCell align=\"right\">Hrvatska</TableCell>\r\n            <TableCell align=\"right\">4,076,246</TableCell>\r\n            <TableCell align=\"right\">{croatia.data.confirmed}</TableCell>\r\n            <TableCell align=\"right\">{croatia.data.active}</TableCell>\r\n            <TableCell align=\"right\">{croatia.data.recovered}</TableCell>\r\n            <TableCell align=\"right\">{croatia.data.deaths}</TableCell>\r\n        </TableRow>\r\n               \r\n  );\r\n  }\r\n}\r\n}\r\n\r\nexport default SerbiaComponent;","import React, { Component } from 'react'\r\nimport * as $ from 'jquery';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nclass BosniaComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        statusBosnia: [],\r\n        loading: true\r\n    }\r\n    this.getStatusBosnia = this.getStatusBosnia.bind(this);\r\n}\r\n\r\n_isMounted = false;\r\n\r\ncomponentDidMount() {\r\n  this._isMounted = true;\r\n  this.getStatusBosnia();\r\n}\r\n\r\ngetStatusBosnia() {\r\n  var url = `https://covid2019-api.herokuapp.com/v2/country/bosnia%20and%20herzegovina`;\r\n  $.get(url, (data) => {\r\n      //console.log(data);\r\n      if (this._isMounted){\r\n        this.setState({\r\n          statusBosnia: data,\r\n          loading: false\r\n        });\r\n      }\r\n  });\r\n}\r\n\r\ncomponentWillUnmount() {\r\n  this._isMounted = false;\r\n}\r\n\r\n  render(){\r\n    if (this.state.loading === true) {\r\n    return (\r\n        <TableRow className=\"wrapper\">\r\n            <TableCell className=\"loading\" colSpan=\"7\">Uƒçitavam podatke...</TableCell>\r\n        </TableRow>\r\n    )\r\n    } else {\r\n      console.log(this.state)\r\n      let bosnia = this.state.statusBosnia;\r\n      return (\r\n          <TableRow>\r\n              <TableCell align=\"right\">3</TableCell>\r\n              <TableCell align=\"right\">Bosna i Hercegovina</TableCell>\r\n              <TableCell align=\"right\">3,511,372</TableCell>\r\n              <TableCell align=\"right\">{bosnia.data.confirmed}</TableCell>\r\n              <TableCell align=\"right\">{bosnia.data.active}</TableCell>\r\n              <TableCell align=\"right\">{bosnia.data.recovered}</TableCell>\r\n              <TableCell align=\"right\">{bosnia.data.deaths}</TableCell>\r\n          </TableRow>\r\n      );\r\n    }\r\n  }\r\n}\r\nexport default BosniaComponent;","import React, { Component } from 'react'\r\nimport * as $ from 'jquery';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nclass MontenegroComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        statusMontenegro: [],\r\n        loading: true\r\n    }\r\n    this.getStatusMontenegro = this.getStatusMontenegro.bind(this);\r\n}\r\n\r\n_isMounted = false;\r\n\r\ncomponentDidMount() {\r\n  this._isMounted = true;\r\n  this.getStatusMontenegro();\r\n}\r\n\r\ngetStatusMontenegro() {\r\n  var url = `https://covid2019-api.herokuapp.com/v2/country/montenegro`;\r\n  $.get(url, (data) => {\r\n      //console.log(data);\r\n      if (this._isMounted){\r\n        this.setState({\r\n          statusMontenegro: data,\r\n          loading: false\r\n        });\r\n      }\r\n  });\r\n}\r\n\r\ncomponentWillUnmount() {\r\n  this._isMounted = false;\r\n}\r\n\r\n  render(){\r\n    if (this.state.loading === true) {\r\n    return (\r\n        <TableRow className=\"wrapper\">\r\n            <TableCell className=\"loading\" colSpan=\"7\">Uƒçitavam podatke...</TableCell>\r\n        </TableRow>\r\n    )\r\n    } else {\r\n      console.log(this.state)\r\n      let montenegro = this.state.statusMontenegro;\r\n      return (\r\n          <TableRow>\r\n              <TableCell align=\"right\">4</TableCell>\r\n              <TableCell align=\"right\">Crna Gora</TableCell>\r\n              <TableCell align=\"right\">631,219</TableCell>\r\n              <TableCell align=\"right\">{montenegro.data.confirmed}</TableCell>\r\n              <TableCell align=\"right\">{montenegro.data.active}</TableCell>\r\n              <TableCell align=\"right\">{montenegro.data.recovered}</TableCell>\r\n              <TableCell align=\"right\">{montenegro.data.deaths}</TableCell>\r\n          </TableRow>\r\n      );\r\n    }\r\n  }\r\n}\r\nexport default MontenegroComponent;","import React, { Component } from 'react'\r\nimport * as $ from 'jquery';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nclass SloveniaComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        statusSlovenia: [],\r\n        loading: true\r\n    }\r\n    this.getStatusSlovenia = this.getStatusSlovenia.bind(this);\r\n}\r\n\r\n_isMounted = false;\r\n\r\ncomponentDidMount() {\r\n  this._isMounted = true;\r\n  this.getStatusSlovenia();\r\n}\r\n\r\ngetStatusSlovenia() {\r\n  var url = `https://covid2019-api.herokuapp.com/v2/country/slovenia`;\r\n  $.get(url, (data) => {\r\n      //console.log(data);\r\n      if (this._isMounted){\r\n        this.setState({\r\n          statusSlovenia: data,\r\n          loading: false\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n  }\r\n  \r\n  render(){\r\n    if (this.state.loading === true) {\r\n    return (\r\n        <TableRow className=\"wrapper\">\r\n            <TableCell className=\"loading\" colSpan=\"7\">Uƒçitavam podatke...</TableCell>\r\n        </TableRow>\r\n    )\r\n    } else {\r\n      console.log(this.state)\r\n      let slovenia = this.state.statusSlovenia;\r\n      return (\r\n          <TableRow>\r\n              <TableCell align=\"right\">5</TableCell>\r\n              <TableCell align=\"right\">Slovenija</TableCell>\r\n              <TableCell align=\"right\">2,094,060</TableCell>\r\n              <TableCell align=\"right\">{slovenia.data.confirmed}</TableCell>\r\n              <TableCell align=\"right\">{slovenia.data.active}</TableCell>\r\n              <TableCell align=\"right\">{slovenia.data.recovered}</TableCell>\r\n              <TableCell align=\"right\">{slovenia.data.deaths}</TableCell>\r\n          </TableRow>\r\n      );\r\n    }\r\n  }\r\n}\r\nexport default SloveniaComponent;","import React, { Component } from 'react'\r\nimport * as $ from 'jquery';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nclass MacedoniaComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        statusMacedonia: [],\r\n        loading: true\r\n    }\r\n    this.getStatusMacedonia = this.getStatusMacedonia.bind(this);\r\n}\r\n\r\n_isMounted = false;\r\n\r\ncomponentDidMount() {\r\n  this._isMounted = true;\r\n  this.getStatusMacedonia();\r\n}\r\n\r\ngetStatusMacedonia() {\r\n  var url = `https://covid2019-api.herokuapp.com/v2/country/north%20macedonia`;\r\n  $.get(url, (data) => {\r\n      //console.log(data);\r\n      if (this._isMounted){\r\n        this.setState({\r\n          statusMacedonia: data,\r\n          loading: false\r\n        });\r\n      }\r\n  });\r\n}\r\n\r\ncomponentWillUnmount(){\r\n  this._isMounted = false;\r\n}\r\n\r\n  render(){\r\n    if (this.state.loading === true) {\r\n    return (\r\n        <TableRow className=\"wrapper\">\r\n            <TableCell className=\"loading\" colSpan=\"7\">Uƒçitavam podatke...</TableCell>\r\n        </TableRow>\r\n    )\r\n    } else {\r\n      console.log(this.state)\r\n      let macedonia = this.state.statusMacedonia;\r\n      return (\r\n          <TableRow>\r\n              <TableCell align=\"right\">6</TableCell>\r\n              <TableCell align=\"right\">Severna Makedonija</TableCell>\r\n              <TableCell align=\"right\">2,077,132</TableCell>\r\n              <TableCell align=\"right\">{macedonia.data.confirmed}</TableCell>\r\n              <TableCell align=\"right\">{macedonia.data.active}</TableCell>\r\n              <TableCell align=\"right\">{macedonia.data.recovered}</TableCell>\r\n              <TableCell align=\"right\">{macedonia.data.deaths}</TableCell>\r\n          </TableRow>\r\n      );\r\n    }\r\n  }\r\n}\r\nexport default MacedoniaComponent;","import React, { Component } from 'react';\n\nimport SerbiaComponent from './components/SerbiaComponent';\nimport CroatiaComponent from './components/CroatiaComponent';\nimport BosniaComponent from './components/BosniaComponent';\nimport MontenegroComponent from './components/MontenegroComponent';\nimport SloveniaComponent from './components/SloveniaComponent';\nimport MacedoniaComponent from './components/MacedoniaComponent';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\n\nclass App extends Component {\n  \n  constructor(props) {\n    super(props)\n      this.state = {\n        isActive:false\n      }\n  }\n  \n  handleShow = () => {\n    if(this.state.isActive === false) {\n      this.setState({\n          isActive: true\n      })\n    } else {\n      this.setState({\n        isActive: false\n      })\n    }\n  }\n\n  render() {\n  return (\n    <div className=\"App\">\n      <div className=\"show\">\n        <Button variant=\"contained\" onClick={this.handleShow}>{ !this.state.isActive ? \"Prika≈æi\" : \"Sakri\" } podatke</Button>\n      </div>\n      <div className=\"showResults\">\n        <h1>COVID 19 u zemljama bivse Juge:</h1>\n        {this.state.isActive ? \n        <TableContainer component={Paper} id=\"prikazPodataka\">\n          <Table className=\"table\" aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                <TableCell align=\"right\">RB</TableCell>\n                <TableCell align=\"right\">Zemlja</TableCell>\n                <TableCell align=\"right\">Ukupna populacija</TableCell>\n                <TableCell align=\"right\">Broj zara≈æenih</TableCell>\n                <TableCell align=\"right\">Broj aktivnih</TableCell>\n                <TableCell align=\"right\">Broj izleƒçenih</TableCell>\n                <TableCell align=\"right\">Broj preminulih</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n                <SerbiaComponent />\n                <CroatiaComponent />\n                <BosniaComponent />\n                <MontenegroComponent />\n                <SloveniaComponent />\n                <MacedoniaComponent />\n            </TableBody>\n          </Table>\n        </TableContainer>\n        : null }\n      </div>\n    </div>\n  );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}